-- Creating the SALESMAN table
CREATE TABLE SALESMAN (
    SALESMAN_ID INT PRIMARY KEY,
    NAME VARCHAR(20),
    COMMISSION INT,
    CITY VARCHAR(20)
);

-- Creating the CUSTOMER table
CREATE TABLE CUSTOMER (
    CUSTOMER_ID INT PRIMARY KEY,
    CUST_NAME VARCHAR(50),
    CITY VARCHAR(20),
    GRADE INT,
    SALESMAN_ID INT,
    FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN(SALESMAN_ID) ON DELETE CASCADE
);

-- Creating the ORDERS table
CREATE TABLE ORDERS (
    ORD_NO INT PRIMARY KEY,
    PURCHASE_AMT DECIMAL(10,2),
    ORD_DATE DATE,
    CUSTOMER_ID INT,
    SALESMAN_ID INT,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE,
    FOREIGN KEY (SALESMAN_ID) REFERENCES SALESMAN(SALESMAN_ID) ON DELETE CASCADE
);

-- Inserting data into SALESMAN table
INSERT INTO SALESMAN VALUES (1000, 'JOHN', 25, 'BANGALORE');
INSERT INTO SALESMAN VALUES (2000, 'RAVI', 20, 'BANGALORE');
INSERT INTO SALESMAN VALUES (3000, 'KUMAR', 15, 'MYSORE');
INSERT INTO SALESMAN VALUES (4000, 'SMITH', 30, 'DELHI');
INSERT INTO SALESMAN VALUES (5000, 'HARSHA', 15, 'HYDERABAD');

-- Inserting data into CUSTOMER table
INSERT INTO CUSTOMER VALUES (10, 'PREETHI', 'BANGALORE', 100, 1000);
INSERT INTO CUSTOMER VALUES (11, 'VIVEK', 'MANGALORE', 300, 1000);
INSERT INTO CUSTOMER VALUES (12, 'BHASKAR', 'CHENNAI', 400, 2000);
INSERT INTO CUSTOMER VALUES (13, 'CHETHAN', 'BANGALORE', 200, 2000);
INSERT INTO CUSTOMER VALUES (14, 'MAMATHA', 'BANGALORE', 400, 3000);

-- Inserting data into ORDERS table
INSERT INTO ORDERS VALUES (50, 5000, '2017-05-04', 10, 1000);
INSERT INTO ORDERS VALUES (51, 450, '2017-01-20', 10, 2000);
INSERT INTO ORDERS VALUES (52, 1000, '2017-02-24', 13, 2000);
INSERT INTO ORDERS VALUES (53, 3500, '2017-04-13', 14, 3000);
INSERT INTO ORDERS VALUES (54, 550, '2017-03-09', 12, 2000);

-- Q1: Count of customers per grade where the grade is above the average grade of customers in Bangalore
SELECT 
    GRADE, 
    COUNT(DISTINCT CUSTOMER_ID) 
FROM CUSTOMER
GROUP BY GRADE
HAVING GRADE > (
    SELECT AVG(GRADE)
    FROM CUSTOMER 
    WHERE CITY = 'BANGALORE'
);

-- Q2: Retrieve salesmen with more than one customer
SELECT SALESMAN_ID, NAME 
FROM SALESMAN A
WHERE 1 < (
    SELECT COUNT(*)
    FROM CUSTOMER
    WHERE SALESMAN_ID = A.SALESMAN_ID
);

-- Q3: Retrieve salesmen and customers in the same city, and salesmen without matching customers
SELECT SALESMAN.SALESMAN_ID, NAME, CUST_NAME, COMMISSION 
FROM SALESMAN, CUSTOMER
WHERE SALESMAN.CITY = CUSTOMER.CITY
UNION
SELECT SALESMAN_ID, NAME, 'NO MATCH', COMMISSION 
FROM SALESMAN
WHERE NOT CITY = ANY (
    SELECT CITY FROM CUSTOMER
)
ORDER BY 2 DESC;

-- Q4: Create a view of elite salesmen based on the highest purchase amount per order date
CREATE VIEW ELITESALESMAN AS
SELECT 
    B.ORD_DATE, 
    A.SALESMAN_ID, 
    A.NAME 
FROM SALESMAN A, ORDERS B
WHERE A.SALESMAN_ID = B.SALESMAN_ID
AND B.PURCHASE_AMT = (
    SELECT MAX(PURCHASE_AMT) 
    FROM ORDERS C 
    WHERE C.ORD_DATE = B.ORD_DATE
);

-- Q5: Delete a salesman with ID 1000 (cascade delete applies to related records)
DELETE FROM SALESMAN
WHERE SALESMAN_ID = 1000;
