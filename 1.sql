-- Drop existing tables if they exist
DROP TABLE IF EXISTS BOOK_LENDING;
DROP TABLE IF EXISTS BOOK_COPIES;
DROP TABLE IF EXISTS CARD;
DROP TABLE IF EXISTS BOOK_AUTHORS;
DROP TABLE IF EXISTS BOOK_PARTITION;
DROP TABLE IF EXISTS BOOK;
DROP TABLE IF EXISTS LIBRARY_BRANCH;
DROP TABLE IF EXISTS PUBLISHER;

------- CREATION -------

CREATE TABLE PUBLISHER (NAME VARCHAR (20) PRIMARY KEY,
 PHONE VARCHAR(10),
 ADDRESS VARCHAR (20)); 

CREATE TABLE BOOK (
  BOOK_ID INT PRIMARY KEY, 
  TITLE VARCHAR(20),
  PUB_YEAR VARCHAR(20),
  PUBLISHER_NAME VARCHAR(255),
  FOREIGN KEY (PUBLISHER_NAME) REFERENCES PUBLISHER(NAME) ON DELETE CASCADE
);

CREATE TABLE BOOK_AUTHORS (
  AUTHOR_NAME VARCHAR(20),
  BOOK_ID INT,
  PRIMARY KEY (BOOK_ID, AUTHOR_NAME),
  FOREIGN KEY (BOOK_ID) REFERENCES BOOK (BOOK_ID) ON DELETE CASCADE
);

CREATE TABLE LIBRARY_BRANCH (
  BRANCH_ID INT PRIMARY KEY,
  BRANCH_NAME VARCHAR(50),
  ADDRESS VARCHAR(50)
);

CREATE TABLE BOOK_COPIES (
  NO_OF_COPIES INT,
  BOOK_ID INT,
  BRANCH_ID INT,
  PRIMARY KEY (BOOK_ID, BRANCH_ID),
  FOREIGN KEY (BOOK_ID) REFERENCES BOOK (BOOK_ID) ON DELETE CASCADE,
  FOREIGN KEY (BRANCH_ID) REFERENCES LIBRARY_BRANCH (BRANCH_ID) ON DELETE CASCADE
);

CREATE TABLE CARD (
  CARD_NO INT PRIMARY KEY
);

CREATE TABLE BOOK_LENDING (
  DATE_OUT DATE,
  DUE_DATE DATE,
  BOOK_ID INT,
  BRANCH_ID INT,
  CARD_NO INT,
  PRIMARY KEY (BOOK_ID, BRANCH_ID, CARD_NO),
  FOREIGN KEY (BOOK_ID) REFERENCES BOOK (BOOK_ID) ON DELETE CASCADE,
  FOREIGN KEY (BRANCH_ID) REFERENCES LIBRARY_BRANCH (BRANCH_ID) ON DELETE CASCADE,
  FOREIGN KEY (CARD_NO) REFERENCES CARD (CARD_NO) ON DELETE CASCADE
);

----- INSERTION ------

-- Publishers
INSERT INTO PUBLISHER VALUES ('MCGRAW-HILL', '9989076587', 'BANGALORE');
INSERT INTO PUBLISHER VALUES ('PEARSON', '9889076565', 'NEWDELHI');
INSERT INTO PUBLISHER VALUES ('RANDOM HOUSE', '7455679345', 'HYDERABAD');
INSERT INTO PUBLISHER VALUES ('HACHETTE LIVRE', '8970862340', 'CHENNAI');
INSERT INTO PUBLISHER VALUES ('GRUPO PLANETA', '7756120238', 'BANGALORE');

-- Books
INSERT INTO BOOK VALUES (1, 'DBMS', 'JAN-2017', 'MCGRAW-HILL');
INSERT INTO BOOK VALUES (2, 'ADBMS', 'JUN-2016', 'MCGRAW-HILL');
INSERT INTO BOOK VALUES (3, 'CN', 'SEP-2016', 'PEARSON');
INSERT INTO BOOK VALUES (4, 'CG', 'SEP-2015', 'GRUPO PLANETA');
INSERT INTO BOOK VALUES (5, 'OS', 'MAY-2016', 'PEARSON');

-- Book Authors
INSERT INTO BOOK_AUTHORS VALUES ('NAVATHE', 1);
INSERT INTO BOOK_AUTHORS VALUES ('NAVATHE', 2);
INSERT INTO BOOK_AUTHORS VALUES ('TANENBAUM', 3);
INSERT INTO BOOK_AUTHORS VALUES ('EDWARD ANGEL', 4);
INSERT INTO BOOK_AUTHORS VALUES ('GALVIN', 5);

-- Library Branches
INSERT INTO LIBRARY_BRANCH VALUES (10, 'RR NAGAR', 'BANGALORE');
INSERT INTO LIBRARY_BRANCH VALUES (11, 'RNSIT', 'BANGALORE');
INSERT INTO LIBRARY_BRANCH VALUES (12, 'RAJAJINAGAR', 'BANGALORE');
INSERT INTO LIBRARY_BRANCH VALUES (13, 'NITTE', 'MANGALORE');
INSERT INTO LIBRARY_BRANCH VALUES (14, 'MANIPAL', 'UDUPI');

-- Book Copies
INSERT INTO BOOK_COPIES VALUES (10, 1, 10);
INSERT INTO BOOK_COPIES VALUES (5, 1, 11);
INSERT INTO BOOK_COPIES VALUES (2, 2, 12);
INSERT INTO BOOK_COPIES VALUES (5, 2, 13);
INSERT INTO BOOK_COPIES VALUES (7, 3, 14);
INSERT INTO BOOK_COPIES VALUES (1, 5, 10);
INSERT INTO BOOK_COPIES VALUES (3, 4, 11);

-- Card Inserts
INSERT INTO CARD VALUES (100);
INSERT INTO CARD VALUES (101);
INSERT INTO CARD VALUES (102);
INSERT INTO CARD VALUES (103);
INSERT INTO CARD VALUES (104);

-- Book Lending - Adding more records for card 101 to satisfy query #2
INSERT INTO BOOK_LENDING VALUES ('2017-01-01', '2017-06-01', 1, 10, 101);
INSERT INTO BOOK_LENDING VALUES ('2017-01-11', '2017-03-11', 3, 14, 101);
INSERT INTO BOOK_LENDING VALUES ('2017-02-21', '2017-04-21', 2, 13, 101);
INSERT INTO BOOK_LENDING VALUES ('2017-03-15', '2017-07-15', 4, 11, 101);
INSERT INTO BOOK_LENDING VALUES ('2017-04-12', '2017-05-12', 1, 11, 104);


-------- QUERIES ----------

-- 1. Retrieve details of all books in the library â€“ id, title, name of publisher, authors, number of copies in each branch, etc.
SELECT 
    B.BOOK_ID, 
    B.TITLE, 
    B.PUBLISHER_NAME, 
    A.AUTHOR_NAME, 
    C.NO_OF_COPIES, 
    L.BRANCH_ID,
    L.BRANCH_NAME
FROM 
    BOOK B
JOIN 
    BOOK_AUTHORS A ON B.BOOK_ID = A.BOOK_ID
JOIN 
    BOOK_COPIES C ON B.BOOK_ID = C.BOOK_ID
JOIN 
    LIBRARY_BRANCH L ON C.BRANCH_ID = L.BRANCH_ID;

-- 2. Get the particulars of borrowers who have borrowed more than 3 books, but from Jan 2017 to Jun 2017
SELECT CARD_NO 
FROM BOOK_LENDING 
WHERE DATE_OUT BETWEEN '2017-01-01' AND '2017-06-30'
GROUP BY CARD_NO 
HAVING COUNT(*) > 3;

-- 3. Delete a book in BOOK table. Update the contents of other tables to reflect this data manipulation operation
DELETE FROM BOOK WHERE BOOK_ID=3;

-- 4. Alternative approach to demonstrate partitioning functionality without using PARTITION BY
-- Create separate tables for different year ranges instead of actual partitioning
DROP TABLE IF EXISTS BOOK_BEFORE_2010;
DROP TABLE IF EXISTS BOOK_2010_TO_2014;
DROP TABLE IF EXISTS BOOK_2015_TO_2019;
DROP TABLE IF EXISTS BOOK_AFTER_2019;

-- Create tables for different year ranges
CREATE TABLE BOOK_BEFORE_2010 (
    BOOK_ID INT PRIMARY KEY,
    TITLE VARCHAR(20),
    PUB_YEAR INT,
    PUBLISHER_NAME VARCHAR(255),
    FOREIGN KEY (PUBLISHER_NAME) REFERENCES PUBLISHER(NAME) ON DELETE CASCADE
);

CREATE TABLE BOOK_2010_TO_2014 (
    BOOK_ID INT PRIMARY KEY,
    TITLE VARCHAR(20),
    PUB_YEAR INT,
    PUBLISHER_NAME VARCHAR(255),
    FOREIGN KEY (PUBLISHER_NAME) REFERENCES PUBLISHER(NAME) ON DELETE CASCADE
);

CREATE TABLE BOOK_2015_TO_2019 (
    BOOK_ID INT PRIMARY KEY,
    TITLE VARCHAR(20),
    PUB_YEAR INT,
    PUBLISHER_NAME VARCHAR(255),
    FOREIGN KEY (PUBLISHER_NAME) REFERENCES PUBLISHER(NAME) ON DELETE CASCADE
);

CREATE TABLE BOOK_AFTER_2019 (
    BOOK_ID INT PRIMARY KEY,
    TITLE VARCHAR(20),
    PUB_YEAR INT,
    PUBLISHER_NAME VARCHAR(255),
    FOREIGN KEY (PUBLISHER_NAME) REFERENCES PUBLISHER(NAME) ON DELETE CASCADE
);

-- Insert sample data with numeric year format into appropriate tables
INSERT INTO BOOK_BEFORE_2010 VALUES (6, 'AI', 2009, 'PEARSON');
INSERT INTO BOOK_2015_TO_2019 VALUES (1, 'DBMS', 2017, 'MCGRAW-HILL');
INSERT INTO BOOK_2015_TO_2019 VALUES (2, 'ADBMS', 2016, 'MCGRAW-HILL');
INSERT INTO BOOK_2015_TO_2019 VALUES (3, 'CN', 2016, 'PEARSON');
INSERT INTO BOOK_2015_TO_2019 VALUES (4, 'CG', 2015, 'GRUPO PLANETA');
INSERT INTO BOOK_2015_TO_2019 VALUES (5, 'OS', 2016, 'PEARSON');
INSERT INTO BOOK_2015_TO_2019 VALUES (7, 'ML', 2018, 'MCGRAW-HILL');

-- Query to demonstrate the partitioning concept
SELECT * FROM BOOK_BEFORE_2010; -- Books before 2010
SELECT * FROM BOOK_2010_TO_2014; -- Books 2010-2014
SELECT * FROM BOOK_2015_TO_2019; -- Books 2015-2019
SELECT * FROM BOOK_AFTER_2019;   -- Books 2020 and after

-- Query to simulate a UNION of all partitions
SELECT 'Before 2010' AS PERIOD, BOOK_ID, TITLE, PUB_YEAR, PUBLISHER_NAME FROM BOOK_BEFORE_2010
UNION ALL
SELECT '2010-2014' AS PERIOD, BOOK_ID, TITLE, PUB_YEAR, PUBLISHER_NAME FROM BOOK_2010_TO_2014
UNION ALL
SELECT '2015-2019' AS PERIOD, BOOK_ID, TITLE, PUB_YEAR, PUBLISHER_NAME FROM BOOK_2015_TO_2019
UNION ALL
SELECT 'After 2019' AS PERIOD, BOOK_ID, TITLE, PUB_YEAR, PUBLISHER_NAME FROM BOOK_AFTER_2019
ORDER BY PUB_YEAR;

-- 5. Create a view of all books and its number of copies that are currently available in the Library.
CREATE VIEW V_AVAILABLE_BOOKS AS
SELECT 
    B.BOOK_ID, 
    B.TITLE, 
    B.PUBLISHER_NAME,
    C.BRANCH_ID,
    L.BRANCH_NAME,
    C.NO_OF_COPIES - COALESCE(
        (SELECT COUNT(*) 
         FROM BOOK_LENDING BL 
         WHERE BL.BOOK_ID = B.BOOK_ID 
         AND BL.BRANCH_ID = C.BRANCH_ID 
         AND CURRENT_DATE BETWEEN BL.DATE_OUT AND BL.DUE_DATE), 0
    ) AS AVAILABLE_COPIES
FROM 
    BOOK B
JOIN 
    BOOK_COPIES C ON B.BOOK_ID = C.BOOK_ID
JOIN
    LIBRARY_BRANCH L ON C.BRANCH_ID = L.BRANCH_ID;

-- Select from the view
SELECT * FROM V_AVAILABLE_BOOKS;
